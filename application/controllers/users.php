<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');
/**
 * PageStudio
 *
 * A web application for managing website content. For use with PHP 5.4+
 * 
 * This application is based on the PHP framework, 
 * PIP http://gilbitron.github.io/PIP/. PIP has been greatly altered to 
 * work for the purposes of our development team. Additional resources 
 * and concepts have been borrowed from CodeIgniter,
 * http://codeigniter.com for further improvement and reliability. 
 *
 * @package     PageStudio
 * @author      Cosmo Mathieu <cosmo@cosmointeractive.co>   
 */
 
// ------------------------------------------------------------------------

class Users extends MY_Controller
{	
    /**
     * Array containing errors generated by object methods
     * @var        array $errors
     */
    private     $errors = array();
    
    /**
     * Temporary/encrypted version of the password to be stored in the database.
     * @var        string $tmp_passwd
     */
    private     $tmp_passwd;
    
     
	public function index()
	{        
        $bc = new Breadcrumb();
        $bc->addCrumb('Users', BASE_URL . 'users');
        
		$template = $this->loadView('users/users_view');
        $template->set('page', array(
            'title' => 'Users',
            'heading' => 'The users page',
            'description' => 'Manage accounts',
            'icon' => '<i class="icon x32 icon-users"></i>'
        ));
        $template->set('bread', $bc->makeBread());
        $template->set('users' , $this->loadUsers());
		$template->render();
	}
    
    // --------------------------------------------------------------------
    
    /**
     * Load all categories
     * @access      Private 
     */
    private function loadUsers()
    {
        $users = $this->loadModel('Users_model');
        return $users->getUsers();
    }
    
    // --------------------------------------------------------------------
    
    /**
     * Method to edit a specific entry
     *
     * Add a entry into the database and build a template view
     * @access  public 
     */
    public function add()
    {
        $bc = new Breadcrumb();
        $bc->addCrumb('Users', BASE_URL . 'users');
        $bc->addCrumb('Add User', BASE_URL . 'users/add/');
        
        // Load models
        $users = $this->loadModel('Users_model');
        
        /**
         * Build the template view 
         */
        // Load the view
		$template = $this->loadView('users/create_account_view');
        
        // Set default template vars 
        $template->set('page', array(
            'title' => 'Add User Account',
            'icon' => '<i class="icon x32 icon-users"></i>',
            'heading' => 'Add New User Account',
            'description' => 'Add a new user account to the cms'
        ));
        
        // Check if _POST form submitted and perform actions 
        if(Input::exists('post')) {                
            if(Input::get('create')) {
                /** 
                 * Check if a token was submitted and validate it. This hepls
                 * prevent the same form with the same data from being 
                 * submitted twice, and CSRF.
                 */
                if(Token::validate(Input::get('token'))) {
                    /** Validate user Input. */
                    $validate = new Validate();
                    $validation = $validate->check($_POST, array(
                        'username' => array(
                            'required' => true,
                            'min' => 5,
                            'max' => 20,
                            // 'unique' => 'cimp_users',
                            'field_name' => 'Username'
                        ),
                        'firstname' => array(
                            'required' => true,
                            'min' => 3,
                            'max' => 50
                        ),
                        'lastname' => array(
                            'required' => true,
                            'min' => 3,
                            'max' => 50
                        ),
                        'email' => array(
                            'required' => true,
                            'min' => 8,
                            'max' => 50
                        ),
                        'role' => array(
                            'required' => true,
                            'min' => 1,
                            'max' => 50
                        )
                    ));
                    
                    // Validate password fields and ensure that they match 
                    // Generate hashed password version and store in @var $tmp_passwd
                    $this->passwordCheck(true);

                    // If validations passed make the changes. Else return the errors.
                    if($validate->passed() && empty($this->errors)) {
                        // Enter user info in the database 
                        if($users->addEntry($this->tmp_passwd)) {
                            // Set flash message
                            Session::set('success', 'User account was successfully created!');
                            
                            unset($_POST);  // Clear the form values
                        }
                        
                    } else {
                        $finalError = 'You must fix the follow errors before proceeding. <br />';
                        foreach($validate->errors() as $error) {
                            $finalError .= $error . '<br />';
                        }
                        $this->errors[] = $finalError;
                        
                        // @todo       Add additional error checking to pinpoint which fields are to be updated.
                        // $errors = array(
                            // 'noFname' => 'First name is required'
                        // );
                    }
                } else {
                    $this->errors[] = 'Token mismatch. It looks like you tried to refresh your browser. Try clicking the update button to submit your changes.'; 
                }
                
            } 
        } 
        
        // Set final template vars 
        $template->set('bread', $bc->makeBread());
        $template->set('errors', $this->errors);
        $template->set('pagelevel_errors', $errors);
        $template->set('top_action_buttons', 
            '<button class="btn btn-primary" name="submit" onclick="document.getElementById(\'editor\').submit();">Add User Account</button>'
        );
		$template->render();
    }
    
    // --------------------------------------------------------------------
    
    /**
     * Update a single category entry in the database 
     * 
     * @param      
     */ 
    public function edit()
    {
        // Load models
        $users = $this->loadModel('users_model');
        $errors = array();
                
        // Check if update form submitted 
        if(Input::exists('post')) { 
            if(Input::get('update')) {
                /** 
                 * Check if a token was submitted and validate it. This hepls
                 * prevent the same form with the same data from being submitted twice. 
                 */
                if(Token::validate(Input::get('token'))) {
                    /** Validate user Input. */
                    $validate = new Validate();
                    $validation = $validate->check($_POST, array(
                        'username' => array(
                            'required' => false,
                            'min' => 5,
                            'max' => 20,
                            // 'unique' => 'cimp_users'
                        ),
                        'firstname' => array(
                            'required' => true,
                            'min' => 3,
                            'max' => 50
                        ),
                        'lastname' => array(
                            'required' => true,
                            'min' => 3,
                            'max' => 50
                        ),
                        'email' => array(
                            'required' => true,
                            'min' => 8,
                            'max' => 50
                        ),
                        'role' => array(
                            'required' => true,
                            'min' => 1,
                            'max' => 50
                        )
                    ));
                    
                    // Validate password changes if any
                    $this->passwordCheck();

                    // If validations passed make the changes. Else return the errors.
                    if($validate->passed() && empty($this->errors)) {
                        
                        $users->updateEntry(Input::get('uid'), $this->tmp_passwd);
                        
                        Session::set('success', 'User account was successfully updated!');
                        
                    } else {
                        foreach($validate->errors() as $error) {
                            $this->errors[] = $error . '<br />';
                        }
                    }
                } else {
                    $this->errors[] = 'Token mismatch. It looks like you tried to refresh your browser. Try clicking the update button to submit your changes.'; 
                }
            
                // Get entry value from database
                $users = $users->getUser(Url::segment(2));
            } 
        } else {
            // Get entry value from database
            $users = $users->getUser(Url::segment(2));
        }
        
        /**
         * Build the user view 
         */
        $bc = new Breadcrumb();
        $bc->addCrumb('Users', BASE_URL . 'users');
        $bc->addCrumb('Edit', BASE_URL . 'users/edit/' . Url::segment(2));

        // Build the template view 
		$template = $this->loadView('users/user_edit_view');
        $template->set('page', array(
            'title' => 'Edit user account',
            'heading' => 'The category edit page',
            'description' => '', 
            'icon' => '<i class="icon x32 icon-pencil"></i>',
            'body_class' => 'bg-grey'
        ));
        $template->set('top_action_buttons', 
            '<button class="btn btn-primary" name="submit" onclick="document.getElementById(\'editor\').submit();">Update User Account</button>'
        );
        $template->set('bread', $bc->makeBread());        
        $template->set('entry', $users);
        $template->set('errors', $this->errors);
		$template->render();
    }
    
    // --------------------------------------------------------------------
    
    /**
     * This method validates password changes.
     * @access     private
     * @return     
     */
    private function passwordCheck($strict = false)
    {
        if(Input::get('password') || Input::get('password2') || $strict) {
            /** Validate user Input. */
            $validate = new Validate();
            $validation = $validate->check($_POST, array(
                'password' => array(
                    'required' => true,
                    'min' => 8,
                    'max' => 60
                ),
                'password2' => array(
                    'required' => true,
                    'min' => 8,
                    'max' => 60
                )
            ));
            
            // If validations passed make the changes. Else return the errors.
            if($validate->passed()) {  
            // @todo       Add method to check if passwd match
                if(Input::get('password') === Input::get('password2')) {
                    
                    // Instantiate the password hasher. And create a readable 8 
                    // character alpha numeric password. 
                    $hasher = new PasswordHash(8, TRUE);                    
                    $this->tmp_passwd = $hasher->HashPassword(Input::get('password'));

                    return true;
                    
                } else {
                    $this->errors[] = 'The two passwords do not match. Please try again.';
                    return false;
                }
            } else {
                foreach($validate->errors() as $error) {
                    $this->errors[] = $error . '<br />';
                }
                return false;
            }
        }
        
    }
    
    // --------------------------------------------------------------------
    
    /**
     * Method to edit a specific entry
     *
     * Retrieve entry info from database and build a template view
     * @access  public 
     */
    public function delete()
    {
        $users = $this->loadModel('Users_model');
        if( $users->deleteEntry(Url::segment(2)) ) {
            /** Store a delete successful message in the session. */
            Session::flash('success', 'User account successfully deleted!');
        } else {
            /** Store a delete successful message in the session. */
            Session::flash('success', 'User account not deleted!');
        }
        $this->redirect('users');
    }
}

/* End of file users.php */
/* Location: ./application/controllers/users.php */